{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { ioBrokerConnector } from \"./lib/MiniDspLib/ioBrokerConnector\";\nimport { MiniDspDevice } from \"./lib/MiniDspLib/MiniDspDevice\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass MiniDsp extends utils.Adapter {\n    dsp!: MiniDspDevice;\n    dspConnector!: ioBrokerConnector;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"mini_dsp\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        this.setState(\"info.connection\", false, true);\n        this.dsp = new MiniDspDevice(0x2752, 0x0011, [\"Analog\", \"Toslink\", \"USB\"], 2, 4);\n        this.dsp.connect();\n\n        this.dspConnector = new ioBrokerConnector(this, this.dsp, \"miniDsp2x4HD\");\n        this.dspConnector.PopulateAndSubscribeStates();\n\n        this.setState(\"info.connection\", true, true);\n    }\n\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            this.dsp?.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        this.dspConnector.stateChanged(id, state);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MiniDsp(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MiniDsp())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,+BAAkC;AAClC,2BAA8B;AAK9B,MAAM,gBAAgB,MAAM,QAAQ;AAAA,EAIzB,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM,iCACC,UADD;AAAA,MAEF,MAAM;AAAA,IACV,EAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,QAEc,UAAyB;AACnC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,SAAK,MAAM,IAAI,mCAAc,OAAQ,IAAQ,CAAC,UAAU,WAAW,KAAK,GAAG,GAAG,CAAC;AAC/E,SAAK,IAAI,QAAQ;AAEjB,SAAK,eAAe,IAAI,2CAAkB,MAAM,KAAK,KAAK,cAAc;AACxE,SAAK,aAAa,2BAA2B;AAE7C,SAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,EAC/C;AAAA,EAEQ,SAAS,UAA4B;AAtCjD;AAuCQ,QAAI;AAMA,iBAAK,QAAL,mBAAU;AACV,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEQ,cAAc,IAAY,OAAgD;AAC9E,SAAK,aAAa,aAAa,IAAI,KAAK;AAAA,EAC5C;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,QAAQ,OAAO;AAChG,OAAO;AAEH,EAAC,OAAM,IAAI,QAAQ,GAAG;AAC1B;",
  "names": []
}
