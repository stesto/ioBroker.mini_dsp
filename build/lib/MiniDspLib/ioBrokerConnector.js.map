{
  "version": 3,
  "sources": ["../../../src/lib/MiniDspLib/ioBrokerConnector.ts"],
  "sourcesContent": ["import { AdapterInstance } from \"@iobroker/adapter-core\";\nimport * as utils from \"../utils\";\nimport { MiniDspDevice } from \"./MiniDspDevice\";\n\nexport class ioBrokerConnector {\n    readonly adapter: AdapterInstance;\n    readonly dsp: MiniDspDevice;\n    readonly deviceName: string;\n\n    constructor(adapter: AdapterInstance, dsp: MiniDspDevice, deviceName: string) {\n        this.adapter = adapter;\n        this.dsp = dsp;\n        this.deviceName = deviceName;\n    }\n\n    PopulateAndSubscribeStates(): void {\n        let stateId: string;\n\n        // Master Volume\n        stateId = this.deviceName + \".masterVolume\";\n        this.adapter.setObjectNotExists(stateId, {\n            type: \"state\",\n            common: {\n                name: \"MasterVolume\",\n                type: \"number\",\n                role: \"level.volume\",\n                read: true,\n                write: true,\n                min: -127.5,\n                max: 0.0,\n                def: 0.0,\n                unit: \"dB\",\n            },\n            native: {},\n        });\n        this.adapter.subscribeStates(stateId);\n\n        // Master Mute\n        stateId = this.deviceName + \".masterMute\";\n        this.adapter.setObjectNotExists(stateId, {\n            type: \"state\",\n            common: {\n                name: \"Master Mute\",\n                type: \"boolean\",\n                role: \"switch\",\n                read: true,\n                write: true,\n                def: false,\n            },\n            native: {},\n        });\n        this.adapter.subscribeStates(stateId);\n\n        // Input Sources\n        for (let i = 0; i < this.dsp.inputSources.length; i++) {\n            stateId = this.deviceName + \".inputSource.\" + (i + 1);\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: this.dsp.inputSources[i].name,\n                    type: \"boolean\",\n                    role: \"switch\",\n                    read: true,\n                    write: true,\n                    def: i == 0 ? true : false,\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n        }\n\n        // Input Channels\n        for (let i = 0; i < this.dsp.inputChannels.length; i++) {\n            // gain\n            stateId = this.deviceName + \".inputChannel.\" + (i + 1) + \".gain\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Gain\",\n                    type: \"number\",\n                    role: \"level.volume\",\n                    read: true,\n                    write: true,\n                    min: -72.0,\n                    max: 12.0,\n                    def: 0.0,\n                    unit: \"dB\",\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n            // mute\n            stateId = this.deviceName + \".inputChannel.\" + (i + 1) + \".mute\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Mute\",\n                    type: \"boolean\",\n                    role: \"switch\",\n                    read: true,\n                    write: true,\n                    def: false,\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n        }\n\n        // Output Channels\n        for (let i = 0; i < this.dsp.outputChannels.length; i++) {\n            // gain\n            stateId = this.deviceName + \".outputChannel.\" + (i + 1) + \".gain\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Gain\",\n                    type: \"number\",\n                    role: \"level.volume\",\n                    read: true,\n                    write: true,\n                    min: -72.0,\n                    max: 12.0,\n                    def: 0.0,\n                    unit: \"dB\",\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n            // mute\n            stateId = this.deviceName + \".outputChannel.\" + (i + 1) + \".mute\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Mute\",\n                    type: \"boolean\",\n                    role: \"switch\",\n                    read: true,\n                    write: true,\n                    def: false,\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n            // invert\n            stateId = this.deviceName + \".outputChannel.\" + (i + 1) + \".invert\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Invert\",\n                    type: \"boolean\",\n                    role: \"switch\",\n                    read: true,\n                    write: true,\n                    def: false,\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n            // delay\n            stateId = this.deviceName + \".outputChannel.\" + (i + 1) + \".delay\";\n            this.adapter.setObjectNotExists(stateId, {\n                type: \"state\",\n                common: {\n                    name: \"Delay\",\n                    type: \"number\",\n                    role: \"switch\",\n                    read: true,\n                    write: true,\n                    def: 0.0,\n                    min: 0.0,\n                    max: 80.0,\n                    unit: \"ms\",\n                },\n                native: {},\n            });\n            this.adapter.subscribeStates(stateId);\n        }\n    }\n\n    stateChanged(id: string, state: ioBroker.State | null | undefined): void {\n        if (!state || state?.ack) return;\n\n        const idSplitted = id.split(\".\");\n        let idx = 0;\n\n        for (let i = 0; i < idSplitted.length; i++) {\n            if (idSplitted[i] === this.deviceName) {\n                idx = i + 1; // + 1 to skip the this.deviceName\n                break;\n            }\n            //return if this.deviceName is not in the state id\n            if (i == idSplitted.length + 1) return;\n        }\n\n        switch (idSplitted[idx]) {\n            case \"masterVolume\":\n                const vol = utils.cramp(<number>state?.val - (<number>state?.val % 0.5), -127.5, 0);\n                this.dsp.masterVolume = vol;\n                this.adapter.setState(id, vol, true);\n                break;\n            case \"masterMute\":\n                this.dsp.masterMute = <boolean>state?.val;\n                this.adapter.setState(id, <boolean>state?.val, true);\n                break;\n            case \"inputSource\":\n                idx = idx + 1;\n                const idSplittedClone = id.split(\".\");\n                for (let i = 0; i < this.dsp.inputSources.length; i++) {\n                    idSplittedClone[idx] = (i + 1).toString();\n                    // select input and set every other to false\n                    if (parseInt(idSplitted[idx]) == i + 1) {\n                        this.dsp.inputSources[i].selected = true;\n                        this.adapter.setState(idSplittedClone.join(\".\"), true, true);\n                    } else {\n                        this.adapter.setState(idSplittedClone.join(\".\"), false, true);\n                    }\n                }\n                break;\n            case \"inputChannel\":\n                const inputIdx = parseInt(idSplitted[idx + 1]) - 1;\n                idx = idx + 2;\n                switch (idSplitted[idx]) {\n                    case \"gain\":\n                        const gain = utils.cramp(utils.round(<number>state?.val, 1), -72.0, 12.0);\n                        this.dsp.inputChannels[inputIdx].gain = gain;\n                        this.adapter.setState(id, gain, true);\n                        break;\n                    case \"mute\":\n                        this.dsp.inputChannels[inputIdx].mute = <boolean>state?.val;\n                        this.adapter.setState(id, <boolean>state?.val, true);\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case \"outputChannel\":\n                const outputIdx = parseInt(idSplitted[idx + 1]) - 1;\n                idx = idx + 2;\n                switch (idSplitted[idx]) {\n                    case \"gain\":\n                        const gain = utils.cramp(utils.round(<number>state?.val, 1), -72.0, 12.0);\n                        this.dsp.outputChannels[outputIdx].gain = gain;\n                        this.adapter.setState(id, gain, true);\n                        break;\n                    case \"mute\":\n                        this.dsp.outputChannels[outputIdx].mute = <boolean>state?.val;\n                        this.adapter.setState(id, <boolean>state?.val, true);\n                        break;\n                    case \"invert\":\n                        this.dsp.outputChannels[outputIdx].invert = <boolean>state?.val;\n                        this.adapter.setState(id, <boolean>state?.val, true);\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
