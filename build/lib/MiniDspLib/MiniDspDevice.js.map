{
  "version": 3,
  "sources": ["../../../src/lib/MiniDspLib/MiniDspDevice.ts"],
  "sourcesContent": ["import * as hid from \"node-hid\";\nimport * as utils from \"../utils\";\nimport { InputChannel } from \"./InputChannel\";\nimport { InputSource } from \"./InputSource\";\nimport { IInputChannel } from \"./interfaces/IInputChannel\";\nimport { IInputSource } from \"./interfaces/IInputSource\";\nimport { IMiniDspDevice } from \"./interfaces/IMiniDspDevice\";\nimport { IOutputChannel } from \"./interfaces/IOutputChannel\";\nimport { OutputChannel } from \"./OutputChannel\";\nhid.setDriverType(\"libusb\");\n\nexport class MiniDspDevice implements IMiniDspDevice {\n    public readonly vendorId: number;\n    public readonly productId: number;\n    public readonly inputSources: IInputSource[];\n    public readonly inputChannels: IInputChannel[];\n    public readonly outputChannels: IOutputChannel[];\n    private device!: hid.HID;\n\n    constructor(\n        vendorId: number,\n        productId: number,\n        inputSources: string[],\n        numberOfInputChannels: number,\n        numberOfOutputChannels: number,\n    ) {\n        this.vendorId = vendorId;\n        this.productId = productId;\n\n        this.inputSources = [];\n        for (let i = 0; i < inputSources.length; i++) {\n            this.inputSources.push(new InputSource(this, i, inputSources[i]));\n        }\n\n        // create indices of input channels (e.g. {0, 1} if a device has 2 input channels)\n        this.inputChannels = [];\n        for (let i = 0; i < numberOfInputChannels; i++) {\n            this.inputChannels.push(new InputChannel(this, i));\n        }\n\n        // create indices of output channels (e.g. {2, 3, 4, 5} with an offset of the amount of input channels)\n        this.outputChannels = [];\n        for (let i = this.inputChannels.length; i < numberOfOutputChannels + this.inputChannels.length; i++) {\n            this.outputChannels.push(new OutputChannel(this, i));\n        }\n    }\n    connect(): void {\n        this.device = new hid.HID(this.vendorId, this.productId);\n    }\n    close(): void {\n        this.device?.close();\n    }\n    public get masterVolume(): number {\n        return 0; //return volume\n    }\n    public set masterVolume(value: number) {\n        this._sendCmd(new Uint8Array([0x42, utils.cramp(value, -127.5, 0) * -2]));\n    }\n\n    public get masterMute(): boolean {\n        return false; //return mute state\n    }\n    public set masterMute(value: boolean) {\n        this._sendCmd(new Uint8Array([0x17, value ? 1 : 0]));\n    }\n\n    _sendCmd(cmd: Uint8Array): void {\n        const buff = new Uint8Array(65); // 64 + 1 for feature report id (neccessary in node-hid I guess?)\n        buff[1] = cmd.length + 1; // Length-byte containing length of data + 1 byte for checksum at the end\n        buff.set(cmd, 2); // insert data\n        // calculate checksum\n        buff[2 + cmd.length] =\n            (cmd.reduce(function (pv: number, cv: number) {\n                return pv + cv;\n            }) +\n                cmd.length +\n                1) %\n            0x100;\n        this.device?.write(Array.from(buff)); // write to miniDSP\n    }\n\n    _setChannelGain(index: number, gain: number): void {\n        const gainBuff: Uint8Array = new Uint8Array(new Float32Array([utils.cramp(gain, -72.0, 12.0)]).buffer);\n        const cmdBuff: Uint8Array = new Uint8Array([\n            0x13,\n            0x80,\n            0x00,\n            0x1a /* add offset (see IInputChannel.ts)*/ + index,\n        ]);\n        const buff: Uint8Array = new Uint8Array(cmdBuff.length + gainBuff.length);\n\n        buff.set(cmdBuff, 0);\n        buff.set(gainBuff, cmdBuff.length);\n\n        this._sendCmd(buff);\n    }\n\n    _setChannelMute(index: number, value: number): void {\n        this._sendCmd(new Uint8Array([0x13, 0x80, 0x00, 0x00 + index, value, 0x00, 0x00, 0x00]));\n    }\n\n    setInputSource(input: number | string): void {\n        if (typeof input === \"number\") {\n            this.inputSources.forEach((val) => {\n                if (val.index === input) {\n                    val.selected = true;\n                    return;\n                }\n            });\n        } else if (typeof input === \"string\") {\n            this.inputSources.forEach((val) => {\n                if (val.name.toLowerCase() === input.toLowerCase()) {\n                    val.selected = true;\n                    return;\n                }\n            });\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
